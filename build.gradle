buildscript {
    repositories {
        maven { url "http://developer.marklogic.com/maven2/" }
        jcenter()
        mavenLocal()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
    }
}

plugins {
    id "java"
    id "maven-publish"
    id "net.saliman.properties" version "1.5.1"
    id "com.marklogic.ml-gradle" version "3.14.0"
}

apply plugin: "maven-publish"
apply plugin: 'com.jfrog.bintray'



/*
 * Tasks needed for gradle test
 */
repositories {
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "http://repository.cloudera.com/artifactory/cloudera-repos/" }
    maven { url "http://developer.marklogic.com/maven2/" }

    jcenter()
    mavenLocal()
}
configurations {
    mlcp {
        resolutionStrategy {
            force "xml-apis:xml-apis:1.4.01"
        }
    }
}
dependencies {
    mlcp "com.marklogic:mlcp:9.0.3"
    mlcp "org.apache.commons:commons-csv:1.2"
    mlcp "com.marklogic:marklogic-mapreduce2:2.2.3"
    mlcp files("log")
    
    testImplementation "com.google.guava:guava:27.1-jre"
    testImplementation "io.rest-assured:json-path:3.0.6"
    testImplementation "io.rest-assured:rest-assured:3.0.6"
    testImplementation "junit:junit:4.12"
    testImplementation "com.googlecode.json-simple:json-simple:1.1.1"
    testImplementation "org.gradle:gradle-tooling-api:2.1"
}

// Build our test environment's properties
test {
    doFirst {
        println "Running tests using the following properties:"
        println "host: " + mlHost
        println "port: " + mlRestPort
        println "user: " + mlUsername
        println "service: " + serviceName
    }
    systemProperty "feature.host", mlHost
    systemProperty "feature.port", mlRestPort
    systemProperty "feature.user", mlUsername
    systemProperty "feature.password", mlPassword
    systemProperty "feature.service", serviceName
}



/*
 * Tasks needed for deploying test data
 */

task loadTestData(dependsOn: [
  "loadGDeltTestData",
  "loadGeoLocationTestData"
])

task loadGDeltTestData(type: com.marklogic.gradle.task.MlcpTask) {
  classpath = configurations.mlcp
  command = "IMPORT"
  port = mlAppConfig.restPort
  database = mlAppConfig.contentDatabaseName
  input_file_path = "data/test/gkg_geojson"
  input_compressed = "true"
  output_collections = "example-gkg,test-data"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_uri_replace = ".*/data/test/,'/'"
}

task loadGeoLocationTestData(type: com.marklogic.gradle.task.MlcpTask) {
  classpath = configurations.mlcp
  command = "IMPORT"
  port = mlAppConfig.restPort
  database = mlAppConfig.contentDatabaseName
  input_file_path = "data/test/GeoLocation"
  input_compressed = "true"
  output_collections = "example-geo,test-data"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_uri_replace = ".*/data/test/,'/'"
}



/*
 * Tasks needed for deploying a gradle plugin to BinTray
 */

// Defines a configuration for the MarkLogic modules; used by the modulesZip task below
configurations {
    modules
}
task sourcesJar(type: Jar) {
    description = "Create a jar of the modules to meet jcenter's requirements for publishing"
    classifier "sources"
    from "src/main/ml-modules"
    destinationDir file("build/libs")
}

task modulesJar(type: Jar) {
    description = "Jar up the marklogic-geo-data-services MarkLogic modules into a package that can be published"
    from("src/main/ml-config") {
        into("marklogic-geo-data-services-modules/ml-config")
    }
    // Not including ml-data since the user will need to specify their own
    from("src/main/ml-modules") {
        into("marklogic-geo-data-services-modules/ml-modules")
    }
    from("src/main/ml-plugins") {
        into("marklogic-geo-data-services-modules/ml-plugins")
    }
    // Not including ml-schemas since the user will need to specify their own
    destinationDir file("build/libs")
    baseName "marklogic-geo-data-services-modules"
}

// Define the artifacts, in addition to the jar registered by the "java" plugin
artifacts {
    modules modulesJar
}

// Setup publishing of both a jar (containing the src/main/java code) and the modules zip
// Can eventually include a test jar (containing some src/test/java code) if desired
// Run "gradle publishtomavenlocal" to publish these locally
publishing.publications {
    sourcesJava(MavenPublication) {
        groupId "com.marklogic"
        artifactId "marklogic-geo-data-services-modules"
        artifact sourcesJar
    }
    mainModules(MavenPublication) {
        groupId "com.marklogic"
        artifactId "marklogic-geo-data-services-modules"
        artifact modulesJar
    }
}

if (project.hasProperty("myBintrayUser")) {
    bintray {
        println "Publishing to BinTray:"
        println "myBintrayUser: " + project.myBintrayUser
        println "myBintrayKey: " + project.myBintrayKey
        println "name: " + project.name
        println "version: " + project.version

        user = project.myBintrayUser
        key = project.myBintrayKey
        publications = ["sourcesJava", "mainModules"]
        pkg {
            repo = "maven"
            name = project.name
            userOrg = "prestonmcgowan"
            licenses = ["Apache-2.0"]
            vcsUrl = "https://github.com/prestonmcgowan/marklogic-geo-data-services"
            //vcsUrl = "https://github.com/marklogic-community/" + project.name + ".git"s
            version {
                name = project.version
                released = new Date()
            }
        }
    }
}