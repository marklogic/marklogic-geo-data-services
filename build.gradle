buildscript {
    if (project.hasProperty("disconnected")) {
        dependencies {
            classpath fileTree(dir: "dependencies/buildscript", include: "*.jar")
        }
    }
    else {
        repositories {
            maven { url "https://plugins.gradle.org/m2/" }
            jcenter()
            mavenLocal()
        }

        dependencies {
            classpath "org.codehaus.groovy:groovy-json:2.4.15"
            classpath "org.codehaus.groovy.modules.http-builder:http-builder:0.5.2"
            classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
            classpath "net.saliman:gradle-properties-plugin:1.4.6"
            classpath "com.marklogic:ml-gradle:3.13.beta1"
           // classpath "org.apache.maven.plugins:maven-deploy-plugin:maven-plugin:3.0.0-M1"
            classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+"
        }
    }
}

plugins {
    id 'maven-publish'
}

apply plugin: "java"
apply plugin: "net.saliman.properties"
apply plugin: "com.moowork.node"
apply plugin: "com.marklogic.ml-gradle"
apply plugin: "maven-publish"
apply plugin: "com.jfrog.bintray"

configurations {
    mlcp
}

ext {
    mlDeployerAppName = "MarkLogic-Geo-Data-Services"
    mlDeployerDir = "build/${mlDeployerAppName}"
    mlDeployerGroup = "ML Deployer"
    mlDeployerZipFilename = "${mlDeployerAppName}.zip"
}

/*
 * If the project has the "disconnected" property defined, then we look for mlcp dependencies in a directory
 * instead of retrieving them from a repository.
 */
if (project.hasProperty("disconnected") && disconnected) {
    println "\nRUNNING IN DISCONNECTED MODE"

    dependencies {
        compile fileTree(dir: "dependencies/buildscript", include: "*.jar")

        mlcp fileTree(dir: "dependencies/mlcp", include: "*.jar")
        mlcp files("log")

        testImplementation fileTree(dir: "dependencies/testImplementation", include: "*.jar")
    }
}

/*
 * If we're not in disconnected mode, then we grab dependencies from repositories, and we define a set of tasks
 * for creating the "mlDeployer" zip file that can be used in a disconnected environment.
 */
else {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://repository.cloudera.com/artifactory/cloudera-repos/" }
        maven { url "http://developer.marklogic.com/maven2/" }

        jcenter()
    }

    configurations {
        mlcp {
            resolutionStrategy {
                force "xml-apis:xml-apis:1.4.01"
            }
        }
    }

    dependencies {
        mlcp "com.marklogic:mlcp:9.0.3"
        mlcp "org.apache.commons:commons-csv:1.2"
        mlcp "com.marklogic:marklogic-mapreduce2:2.2.3"
        mlcp files("log")

        testImplementation 'junit:junit:4.12'
        testImplementation 'io.rest-assured:rest-assured:3.0.6'
        testImplementation 'io.rest-assured:json-path:3.0.6'
        testImplementation "com.googlecode.json-simple:json-simple:1.1.1"
        testImplementation "org.gradle:gradle-tooling-api:2.1"
        testImplementation 'com.google.guava:guava:27.1-jre'
    }

    task copyProjectFiles(type: Copy, group: mlDeployerGroup) {
        dependsOn = [
            "buildPlugin"
	]

        from "."
        include "gradlew", "gradlew.bat"
	include "*.gradle"
	include "*.properties"
        include "gradle/**"
        include "src/main/**"
        include "build/variancenativeplugin/**"
        include "log/**"
        into mlDeployerDir
    }

    task copyBuildScriptDependencies(type: Copy, group: mlDeployerGroup) {
        from buildscript.configurations.classpath
        into mlDeployerDir + "/dependencies/buildscript"
    }

    task copyMlcpDependencies(type: Copy, group: mlDeployerGroup) {
        from configurations.mlcp
        exclude "log4j.properties" // we copy this separately to the log dir
        into mlDeployerDir + "/dependencies/mlcp"
    }

    task addDisconnectedToGradleProperties {
        doLast {
            ant.propertyfile(file: "build/${mlDeployerAppName}/gradle.properties") {
                entry(key: "disconnected", value: "true")
            }
        }
    }

    addDisconnectedToGradleProperties.mustRunAfter copyProjectFiles

    task copyMlDeployerFiles(group: mlDeployerGroup) {
        dependsOn = [
            "copyProjectFiles",
            "copyBuildScriptDependencies",
            "copyMlcpDependencies",
            "addDisconnectedToGradleProperties"
        ]
    }

    task deleteMlDeployer(type: Delete, group: mlDeployerGroup) {
      delete mlDeployerDir, "build/${mlDeployerZipFilename}"
    }

    task buildMlDeployer (type: Zip, group: mlDeployerGroup) {
        description "Create a zip of this project's Gradle dependencies and source code so that it can be deployer without Internet access"
        dependsOn = ["deleteMlDeployer", "copyMlDeployerFiles"]
        from mlDeployerDir
        into mlDeployerAppName
        destinationDir file('build')
        archiveName mlDeployerZipFilename
    }

    copyMlDeployerFiles.mustRunAfter deleteMlDeployer
}

ext {
  mlAppConfig {
    if (project.hasProperty("mlSchemasDatabaseName")) {
      schemasDatabaseName = project.property("mlSchemasDatabaseName")
    }

    println "content database: " + contentDatabaseName
    println "schemas database: " + schemasDatabaseName
  }
}

test {
  doFirst {
    println "Running tests using the following properties:"
    println "host: " + mlHost
    println "port: " + mlRestPort
    println "user: " + mlUsername
  }

  systemProperty "featureServer.host", mlHost
  systemProperty "featureServer.port", mlRestPort
  systemProperty "featureServer.user", mlUsername
  systemProperty "featureServer.password", mlPassword
}

task installConnector(dependsOn: ['mlDeploy', 'installPlugin'])

task buildConnector(dependsOn: ['buildPlugin'])

// Only build the plugin and install koop if we are not in disconnected mode
if (! project.hasProperty("disconnected") || ! disconnected) {
    installConnector.dependsOn("buildConnector")
    installConnector.mustRunAfter buildConnector
}

task installServices(dependsOn: [
    'loadFeatureServices',
    'loadSchemas',
    'loadQueryOptions',
    'loadQueryTransforms'
])

task buildPlugin(type: Exec) {
  doFirst {
    copy {
      from 'src/main/ml-native-plugins/variance'
      into 'build/variancenativeplugin'
    }
  }

  workingDir 'build/variancenativeplugin'
  commandLine 'make'
}
buildPlugin.onlyIf { !System.getProperty("os.name").toLowerCase().contains("windows") }

task installPlugin(dependsOn: [ 'mlDeploy' ], type: com.marklogic.gradle.task.MarkLogicTask) {
  doLast {
    // load binary to the modules database
    def client = newClient()

    def pluginZip = "build/variancenativeplugin/varianceplugin.zip"
    def pluginUri = "/native-plugins/varianceplugin.zip"

    def docMgr = client.newBinaryDocumentManager()
    docMgr.write(
      pluginUri,
      new com.marklogic.client.io.FileHandle().with(new File(pluginZip))
    )

    // eval xquery to install the plugin
    def query = '''
      xquery version "1.0-ml";
      import module namespace plugin = "http://marklogic.com/extension/plugin" at "MarkLogic/plugin/plugin.xqy";
      declare variable $plugin-uri as xs:string external;
      plugin:install-from-zip("native", fn:doc($plugin-uri)/node())
    '''
    def result = client.newServerEval()
      .xquery(query)
      .addVariable("plugin-uri", pluginUri)
      .evalAs(String.class)

    println "Installed " + result + " native plugin(s)"
  }
}
installPlugin.onlyIf { !System.getProperty("os.name").toLowerCase().contains("windows") }

task fsConfigCheck() {
    doLast {
        if (! project.hasProperty("fsConfig")) throw new InvalidUserDataException("The fsConfig property is not set")
    }
}

task loadFeatureServices(type: com.marklogic.gradle.task.MlcpTask, dependsOn: [ "fsConfigCheck" ]) {
    doFirst {
        classpath = configurations.mlcp
        command = "IMPORT"
        port = mlAppConfig.restPort
        database = mlAppConfig.contentDatabaseName

        input_file_path = "feature-services/${fsConfig}/services"
        input_file_type = "documents"
        output_collections = "http://marklogic.com/feature-services"
        output_permissions = project.property("serviceDescriptorPermissions")
        output_uri_replace = ".*/feature-services/,'/'"
    }

    doLast {
        println "Service descriptors loaded"
    }
}

task loadSchemas(type: com.marklogic.gradle.task.schemas.LoadSchemasTask, dependsOn: ["fsConfigCheck"]) {
    doFirst {
        ext {
            mlAppConfig {
                schemasPath = "feature-services/${fsConfig}/templates"
            }
        }
    }

    doLast {
        println "Schemas loaded"
    }
}

task loadQueryOptions(type : com.marklogic.gradle.task.MarkLogicTask, dependsOn: ["fsConfigCheck"]) {
  doLast {
    def client = newClient()
    def manager = client.newServerConfigManager().newQueryOptionsManager()

    if (file("feature-services/${fsConfig}/options").exists()) {
        def files = files(file("feature-services/${fsConfig}/options").listFiles())
        files.each { file ->
            def optionsName = file.name.substring(0, file.name.lastIndexOf("."))
            manager.writeOptions(
                optionsName, new com.marklogic.client.io.FileHandle().with(file)
            )
            println "Loaded query options: ${optionsName}"
        }
    }

    println "Query options loaded"
  }
}

task loadQueryTransforms(type : com.marklogic.gradle.task.MarkLogicTask, dependsOn: ["fsConfigCheck"]) {
  doLast {
    def client = newClient()
    def manager = client.newServerConfigManager().newTransformExtensionsManager()

    if (file("feature-services/${fsConfig}/transforms").exists()) {
        def files = files(file("feature-services/${fsConfig}/transforms").listFiles())
        files.each { file ->
            def transformName = file.name.substring(0, file.name.lastIndexOf("."))
            manager.writeXQueryTransform(
                transformName, new com.marklogic.client.io.FileHandle().with(file)
            )
            println "Loaded transform: ${transformName}"
        }
    }

    println "Query transforms loaded"
  }
}

task loadExampleData(dependsOn: [
  "loadGDeltExampleData",
  "loadZipCodeBoundaryExampleData"
])

task loadGDeltExampleData(type: com.marklogic.gradle.task.MlcpTask) {
  classpath = configurations.mlcp
  command = "IMPORT"
  port = mlAppConfig.restPort
  database = mlAppConfig.contentDatabaseName
  input_file_path = "data/example/gkg_geojson"
  input_compressed = "true"
  output_collections = "example-gkg"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_uri_replace = ".*/data/example/,'/'"
}

task loadZipCodeBoundaryExampleData(type: com.marklogic.gradle.task.MlcpTask) {
  classpath = configurations.mlcp
  command = "IMPORT"
  port = mlAppConfig.restPort
  database = mlAppConfig.contentDatabaseName
  input_file_path = "data/example/zipcodes"
  transform_module = "/transform/wrap-geojson.sjs"
  input_compressed = "true"
  batch_size = 1
  transaction_size = 1
  output_collections = "zipcodes,test-data"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_uri_replace = ".*/data/example/,'/'"
}


task loadTestData(dependsOn: [
  "loadGDeltTestData",
  "loadGeoLocationTestData"
])

task loadGDeltTestData(type: com.marklogic.gradle.task.MlcpTask) {
  classpath = configurations.mlcp
  command = "IMPORT"
  port = mlAppConfig.restPort
  database = mlAppConfig.contentDatabaseName
  input_file_path = "data/test/gkg_geojson"
  input_compressed = "true"
  output_collections = "example-gkg,test-data"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_uri_replace = ".*/data/test/,'/'"
}

task loadGeoLocationTestData(type: com.marklogic.gradle.task.MlcpTask) {
  classpath = configurations.mlcp
  command = "IMPORT"
  port = mlAppConfig.restPort
  database = mlAppConfig.contentDatabaseName
  input_file_path = "data/test/GeoLocation"
  input_compressed = "true"
  output_collections = "example-geo,test-data"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_uri_replace = ".*/data/test/,'/'"
}

import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.Method.POST
import static groovyx.net.http.ContentType.JSON

task testExampleService(type: com.marklogic.gradle.task.MarkLogicTask) {
  doLast {
    def config = getAppConfig()
    def url = 'http://' + config.getHost() + ':' + config.getRestPort() + '/LATEST/resources/KoopProvider'

    def http = new HTTPBuilder(url)
    http.auth.basic config.getRestAdminUsername() , config.getRestAdminPassword()

    def response = http.request( POST, JSON ) { req ->
      body = [
        params : [
          id : "GDeltGKG",
          layer : 0,
          method : "query"
        ],
        query : [
          resultRecordCount : 5,
          outFields : "*"
        ]
      ]

      response.success = { resp, json ->
        println(json)
      }
    }
  }
}


/*
 * Tasks needed for deploying a gradle plugin to BinTray
 */

// Defines a configuration for the MarkLogic modules; used by the modulesZip task below
configurations {
	modules
}
task sourcesJar(type: Jar) {
	description = "Create a jar of the modules to meet jcenter's requirements for publishing"
	classifier "sources"
	from "src/main/ml-modules"
	destinationDir file("build/libs")
}

task modulesJar(type: Jar) {
	description = "Jar up the marklogic-geo-data-services MarkLogic modules into a package that can be published"
	from("src/main/ml-modules") {
		into("marklogic-geo-data-services-modules/ml-modules")
	}
	destinationDir file("build/libs")
	baseName "marklogic-geo-data-services-modules"
}

// Define the artifacts, in addition to the jar registered by the "java" plugin
artifacts {
	modules modulesJar
}

// Setup publishing of both a jar (containing the src/main/java code) and the modules zip
// Can eventually include a test jar (containing some src/test/java code) if desired
// Run "gradle publishtomavenlocal" to publish these locally
publishing.publications {
  sourcesJava(MavenPublication) {
    groupId "com.marklogic"
    artifactId "marklogic-geo-data-services-modules"
    artifact sourcesJar
  }
  mainModules(MavenPublication) {
    groupId "com.marklogic"
    artifactId "marklogic-geo-data-services-modules"
    artifact modulesJar
  }
}

if (project.hasProperty("myBintrayUser")) {
	bintray {
		user = myBintrayUser
		key = myBintrayKey
		publications = ["sourcesJava", "mainModules"]
		pkg {
			repo = "marklogic-geo-data-services"
			name = project.name
			userOrg = 'preston-mcgowan'
			licenses = ["Apache-2.0"]
			//vcsUrl = "https://github.com/marklogic-community/" + project.name + ".git"
			version {
				name = project.version
				released = new Date()
			}
		}
	}
}
